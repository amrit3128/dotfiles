#+title: Doom Emacs Config
#+author: Amritanshu

* Table of Contents :TOC:QUOTE:
#+BEGIN_QUOTE
- [[#init][Init]]
- [[#packages][Packages]]
- [[#config][Config]]
#+END_QUOTE

* Init
#+begin_src elisp :tangle ./init.el

(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;(corfu +orderless)  ; complete with cap(f), cape and a flying feather!
       ;; helm              ; the *other* search engine for love and life
       ;; ido               ; the other *other* search engine...
       ;; ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ligatures         ; ligatures and symbols to make your code pretty again
       minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +flyspell) ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       tmux              ; an API for interacting with tmux
       tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if (featurep :system 'macos) macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       (cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       (dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;; (go +lsp)         ; the hipster dialect
       go
       ;;(graphql +lsp)    ; Give queries a REST
       (haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +pretty)                 ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       yaml              ; JSON, but readable
       (zig +lsp)               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       ;; emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))

#+end_src
* Packages
#+begin_src elisp :tangle ./packages.el

;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;; (package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/radian-software/straight.el#the-recipe-format
;; (package! another-package
;;   :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;; (package! this-package
;;   :recipe (:host github :repo "username/repo"
;;            :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;; (package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;; (package! builtin-package :recipe (:nonrecursive t))
;; (package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see radian-software/straight.el#279)
;; (package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;; (package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;; (unpin! pinned-package)
;; ...or multiple packages
;; (unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;; (unpin! t)

;; Themes
(package! ayu-theme)
(package! catppuccin-theme)
(package! abyss-theme)
(package! cyberpunk-theme)
(package! material-theme)

;; Packages
(package! org-modern)
;; (package! org-download)
(package! openwith)
;; (package! ob-mermaid)
;; (package! org-roam)
;; (package! org-transclusion)
;; (package! ess)
;; (package! elpy)
(package! python-cell)
(package! jupyter)
(package! tree-sitter)
(package! tree-sitter-langs)
(package! treesit-auto)
(package! lsp-pyright)
(package! ripgrep)
(package! rg)
;; (package! org-fancy-priorities)
;; (package! org-brain)
;; (package! org-super-agenda)
(package! vertico-posframe)
;; (package! spacious-padding)
;; (package! undo-tree)
;; (package! slime)
(package! zoxide)
(package! fzf)
(package! imenu-list)
(package! beacon)
(package! emmet-mode)
(package! web-mode)
(package! good-scroll)
(package! mini-frame)
(package! focus)
(package! direnv)
(package! vimrc-mode)
(package! lsp-treemacs)
(package! sudo-edit)
(package! command-log-mode)
(package! md4rd)
;; (package! hyperbole)
;; (package! org-present)
;; (package! peep-dired)

#+end_src
* Config
#+begin_src elisp :tangle ./config.el

;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Amritanshu"
      user-mail-address "tripathyamritanshu7@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;; Relative Line Numbering
;; set type of line numbering (global variable)
(setq display-line-numbers-type 'relative)
;; activate line numbering in all buffers/modes
;; (global-display-line-numbers-mode)
(set-face-attribute 'default nil :height 120)

;; Configure org-babel for jupyter
(use-package! jupyter
  :defer t
  :init
  (setq org-babel-default-header-args:jupyter-python
        '((:session . "py") (:kernel . "python3")))
  (setq ob-async-no-async-languages-alist '("jupyter-python")))

(after! org
  (require 'ob-jupyter))

;; Setting the background blur
(add-to-list 'default-frame-alist '(alpha-background . 90))

(setq
 confirm-kill-emacs nil
 undo-tree-mode 1
 treemacs-is-never-other-window nil
 display-line-numbers 'relative
 projectile-globally-ignored-directories '("env" ".git" "venv" ".venv")
 projectile-project-search-path '("~/git_repos/" "~/codes/"))

;; Dashboard
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-footer)

(defun my-weebery-is-always-greater ()
  (let* ((banner '("███████╗███╗   ███╗ █████╗  ██████╗███████╗"
                   "██╔════╝████╗ ████║██╔══██╗██╔════╝██╔════╝"
                   "█████╗  ██╔████╔██║███████║██║     ███████╗"
                   "██╔══╝  ██║╚██╔╝██║██╔══██║██║     ╚════██║"
                   "███████╗██║ ╚═╝ ██║██║  ██║╚██████╗███████║"
                   "╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚══════╝"
                   "         the editor that god uses          "))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat line (make-string (max 0 (- longest-line (length line))) 32)))
               "\n"))
     'face 'doom-dashboard-banner)))
(setq +doom-dashboard-ascii-banner-fn #'my-weebery-is-always-greater)

;; (after! org
;;   (setq
;;    org-todo-keywords '((sequence "TODO(t)" "INPROGRESS(i)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)"))
;;    org-todo-keyword-faces
;;    '(("TODO" :foreground "#7c7c75" :weigth normal :underline t)
;;      ("WAITING" :foreground "#9f7efe" :weigth normal :underline t)
;;      ("INPROGRESS" :foreground "#0098dd" :weigth normal :underline t)
;;      ("DONE" :foreground "#50a14f" :weigth normal :underline t)
;;      ("CANCELLED" :foreground "#ff6480" :weigth normal :underline t))
;;    org-agenda-files (directory-files-recursively "~/org-notes/" "\.org$")
;;    ))

(require 'lsp-mode)

(add-hook 'go-mode-hook #'lsp-deferred)
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

(lsp-register-custom-settings
 '(("gopls.completeUnimported" t t)
   ("gopls.staticcheck" t t)))

(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp))))  ; or lsp-deferred

(setq custom-file null-device)

(after! evil
  (map! :i "C-h" #'backward-char
        :i "C-j" #'next-line
        :i "C-k" #'previous-line
        :i "C-l" #'forward-char
        ;; :n "C-j" #'evil-window-down
        ;; :n "C-k" #'evil-window-up
        ;; :n "C-h" #'evil-window-left
        ;; :n "C-l" #'evil-window-right
        ;; :n "C-q" #'evil-window-delete
        ;; :n "M-q" #'kill-current-buffer
        ;; :n "M-w" #'+workspace/close-window-or-workspace
        ;; :n "M-n" #'next-buffer
        ;; :n "M-p" #'previous-buffer
        ;; :n "M-z" #'+vterm/toggle
        ;; :n "M-e" #'+eshell/toggle
        ;; :n "M-o" #'hippie-expand
        ;; :desc "Hyperbole" "C-h h" #'hyperbole
        :leader
        ;; :desc "Hippie Expand" "e" #'hippie-expand
        :desc "Jump to register" "r" #'jump-to-register))

;; Quicker window management keybindings
;; (bind-key* "C-j" #'evil-window-down)
;; (bind-key* "C-k" #'evil-window-up)
;; (bind-key* "C-h" #'evil-window-left)
;; (bind-key* "C-l" #'evil-window-right)
(bind-key* "M-o" #'hippie-expand)
(bind-key* "C-q" #'evil-window-delete)
(bind-key* "M-q" #'kill-current-buffer)
(bind-key* "M-w" #'+workspace/close-window-or-workspace)
(bind-key* "M-n" #'next-buffer)
(bind-key* "M-p" #'previous-buffer)
(bind-key* "M-z" #'+vterm/toggle)
(bind-key* "M-e" #'+eshell/toggle)
;; (bind-key* (kbd "M-<return>") #'+vterm/here)
;; (bind-key* (kbd "M-E") #'+eshell/here)

;; (defun disable-cursor()
;;   (setq-local evil-normal-state-cursor '(bar . 0))
;;   (hl-line-mode -1)
;;   )
;; (add-hook 'dashboard-mode-hook 'disable-cursor)

;; Smooth scrolling
;; requires good-scroll.el
;; (good-scroll-mode 1)
;; (setq good-scroll-duration 0.4
;;      good-scroll-step 270
;;      good-scroll-render-rate 0.03)

;; (global-set-key (kbd "<next>") #'good-scroll-up-full-screen)
;; (global-set-key (kbd "<prior>") #'good-scroll-down-full-screen)

;; (setq scroll-margin 10)
;; (setq hscroll-margin 10)

;; Requires for faster loading
;; (require 'org-agenda)
;; (require 'dired)

;; Garbage collection to speed things up
(add-hook 'after-init-hook
          #'(lambda ()
              (setq gc-cons-threshold (* 100 1024 1024))))
(add-hook 'focus-out-hook 'garbage-collect)
(run-with-idle-timer 5 t 'garbage-collect)

;; Neotree fun
(defun neotree-snipe-dir ()
  (interactive)
  (if (projectile-project-root)
      (neotree-dir (projectile-project-root))
    (neotree-dir (file-name-directory (file-truename (buffer-name))))
    )
  )

(map! :leader :desc "Open neotree here" "o n" #'neotree-snipe-dir
      :desc "Hide neotree" "o N" #'neotree-hide)

;; For camelCase
(global-subword-mode 1)

;; ripgrep as grep
(setq grep-command "rg -nS --no-heading "
      grep-use-null-device nil)

;; Mini-frames ;; cool but kinda suboptimal atm
                                        ;(add-load-path! "~/.emacs.d/mini-frame")
;; (require 'mini-frame)
(setq mini-frame-ignore-commands '(evil-ex-search-forward helpful-variable helpful-callable))
(setq mini-frame-show-parameters
      '((left . 216)
        (top . 240)
        (width . 0.78)
        (height . 20)
        (alpha-background . 90))
      )
(setq mini-frame-detach-on-hide nil)
(setq mini-frame-resize t)
(setq resize-mini-frames t)
(setq mini-frame-standalone nil)
;; (mini-frame-mode 1)

;; Automatically show images but manually control their size
;; (setq org-startup-with-inline-images t
;;       org-image-actual-width nil)

;; (require 'evil-org)
;; (require 'evil-org-agenda)
;; (add-hook 'org-mode-hook 'evil-org-mode -100)

;; Top-level headings should be bigger!
(custom-set-faces!
  `(outline-1 :height 1.3 :foreground ,(nth 1 (nth 14 doom-themes--colors)))
  `(outline-2 :height 1.25 :foreground ,(nth 1 (nth 15 doom-themes--colors)))
  `(outline-3 :height 1.2 :foreground ,(nth 1 (nth 19 doom-themes--colors)))
  `(outline-4 :height 1.1 :foreground ,(nth 1 (nth 23 doom-themes--colors)))
  `(outline-5 :height 1.1 :foreground ,(nth 1 (nth 24 doom-themes--colors)))
  `(outline-6 :height 1.1 :foreground ,(nth 1 (nth 16 doom-themes--colors)))
  `(outline-7 :height 1.05 :foreground ,(nth 1 (nth 18 doom-themes--colors)))
  `(outline-8 :height 1.05 :foreground ,(nth 1 (nth 11 doom-themes--colors)))
  '(variable-pitch :family "JetBrainsMono")
  `(org-agenda-date :inherit 'unspecified :foreground ,(nth 1 (nth 19 doom-themes--colors)) :weight bold :height 1.1)
  `(org-agenda-date-today :inherit 'unspecified :foreground ,(nth 1 (nth 15 doom-themes--colors)) :weight bold :height 1.1)
  `(org-agenda-date-weekend :inherit 'unspecified :foreground ,(nth 1 (nth 24 doom-themes--colors)) :weight bold :height 1.1)
  `(org-agenda-date-weekend-today :inherit 'unspecified :foreground ,(nth 1 (nth 15 doom-themes--colors)) :weight bold :height 1.1)
  )

;; (after! org (org-eldoc-load))

;; (with-eval-after-load 'org (global-org-modern-mode))

;; Add frame borders and window dividers
;; (modify-all-frames-parameters
;;  '((right-divider-width . 5)
;;    (internal-border-width . 5)))
;; (dolist (face '(window-divider
;;                 window-divider-first-pixel
;;                 window-divider-last-pixel))
;;   (face-spec-reset-face face)
;;   (set-face-foreground face (face-attribute 'default :background)))
;; (set-face-background 'fringe (face-attribute 'default :background))


;; (setq
 ;; Edit settings
 ;; org-auto-align-tags nil
 ;; org-tags-column 0
 ;; org-special-ctrl-a/e t
 ;; org-insert-heading-respect-content t

 ;; Org styling, hide markup etc.
 ;; org-hide-emphasis-markers t
 ;; org-pretty-entities t
 ;; org-ellipsis "…")

;; (setq-default line-spacing 0)

;; Automatic table of contents is nice
;; (if (require 'toc-org nil t)
;;     (progn
;;       (add-hook 'org-mode-hook 'toc-org-mode)
;;       (add-hook 'markdown-mode-hook 'toc-org-mode))
;;   (warn "toc-org not found"))

;; Better for org source blocks
;; (setq electric-indent-mode nil)
;; (setq org-src-window-setup 'current-window)
;; (set-popup-rule! "^\\*Org Src"
;;   :side 'top'
;;   :size 0.9)


;; Horizontal scrolling tables
;; (add-load-path! "~/.emacs.d/phscroll")
;; (setq org-startup-truncated nil)
;; (with-eval-after-load "org"
;;   (require 'org-phscroll))
;; (setq phscroll-calculate-in-pixels t)

;; Org side tree outline
;; (add-load-path! "~/.emacs.d/org-side-tree")
;; (require 'org-side-tree)
;; (setq org-side-tree-persistent nil)
;; (setq org-side-tree-fontify t)
;; (setq org-side-tree-enable-folding t)
;; (defun org-side-tree-create-or-toggle ()
;;   (interactive)
;;   (if (or (org-side-tree-has-tree-p) (eq major-mode 'org-side-tree-mode))
;;       (org-side-tree-toggle)
;;       (org-side-tree)))
;; (map! :leader
;;       "O t" #'org-side-tree-create-or-toggle)
;; (map! :map org-side-tree-mode-map
;;       "SPC" nil)

;; (require 'org-download)
;; Drag-and-drop to `dired`
;; (add-hook 'dired-mode-hook 'org-download-enable)

;; system-wm-type, wayland or x11? only should be considered if system-nix-profile is "personal" or "work"
;; (if (string= system-wm-type "wayland")
;;   (setq org-download-screenshot-method "grim -g \"$(slurp)\" %s")
;;   (setq org-download-screenshot-method "flameshot gui -p %s")
;; )

;; (after! org-download
;;    (setq org-download-method 'directory))

;; (after! org
;;   (setq-default org-download-image-dir "img/"
;;         org-download-heading-lvl nil))

;; (add-to-list 'display-buffer-alist '("^*Async Shell Command*" . (display-buffer-no-window)))

;; (defun org-download-clipboard-basename ()
;;   (interactive)
;;   (setq org-download-path-last-dir org-download-image-dir)
;;   (setq org-download-image-dir (completing-read "directory: " (-filter #'f-directory-p (directory-files-recursively "." "" t)) nil t))
;;   (org-download-clipboard (completing-read "basename: " '() nil nil))
;;   (setq org-download-image-dir org-download-path-last-dir)
;; )

;; (map! :leader
;;       :desc "Insert a screenshot"
;;       "i s" 'org-download-screenshot
;;       :desc "Insert image from clipboard"
;;       "i p" 'org-download-clipboard
;;       "i P" 'org-download-clipboard-basename)

;; (defun org-new-file-from-template()
;;   "Copy a template from ~/Templates into a time stamped unique-named file in the
;; same directory as the org-buffer and insert a link to this file."
;;   (interactive)
;;   (setq template-file (completing-read "Template file:" (directory-files "~/Templates")))
;;   (setq filename
;;         (concat
;;          (make-temp-name
;;           (concat (file-name-directory (buffer-file-name))
;;                   "files/"
;;                   (file-name-nondirectory (buffer-file-name))
;;                   "_"
;;                   (format-time-string "%Y%m%d_%H%M%S_")) ) (file-name-extension template-file t)))
;;   (copy-file (concat user-home-directory "/Templates/" template-file) filename)
;;   (setq prettyname (read-from-minibuffer "Pretty name:"))
;;   (insert (concat "[[./files/" (file-name-nondirectory filename) "][" prettyname "]]"))
;;   (org-display-inline-images))

;; (map! :leader
;;       :desc "Create a new file from a template and insert a link at point"
;;       "i t" 'my-org-new-file-from-template)

;; (if (not (string= system-nix-profile "wsl"))
;;   (when (require 'openwith nil 'noerror)
;;      (setq openwith-associations
;;            (list
;;            (list (openwith-make-extension-regexp
;;                   '("mpg" "mpeg" "mp3" "mp4"
;;                     "avi" "wmv" "wav" "mov" "flv"
;;                     "ogm" "ogg" "mkv"))
;;                     "mpv"
;;                     '(file))
;;            (list (openwith-make-extension-regexp
;;                   '("doc" "xls" "ppt" "odt" "ods" "odg" "odp"))
;;                     "libreoffice"
;;                     '(file))
;;                '("\\.lyx" "lyx" (file))
;;                '("\\.chm" "kchmviewer" (file))
;;            (list (openwith-make-extension-regexp
;;                   '("pdf" "ps" "ps.gz" "dvi"))
;;                     "atril"
;;                     '(file))
;;            (list (openwith-make-extension-regexp
;;                   '("kdenlive"))
;;                     "kdenlive-accel"
;;                     '(file))
;;            (list (openwith-make-extension-regexp
;;                   '("kra"))
;;                     "krita"
;;                     '(file))
;;            (list (openwith-make-extension-regexp
;;                   '("blend" "blend1"))
;;                     "blender"
;;                     '(file))
;;            (list (openwith-make-extension-regexp
;;                   '("helio"))
;;                     "helio"
;;                     '(file))
;;            (list (openwith-make-extension-regexp
;;                   '("svg"))
;;                     "inkscape"
;;                     '(file))
;;            (list (openwith-make-extension-regexp
;;                   '("flp"))
;;                     "flstudio"
;;                     '(file))
;;            (list (openwith-make-extension-regexp
;;                   '("mid"))
;;                     "rosegarden"
;;                     '(file))
;;                ))
;;      (openwith-mode 1)))

;; (add-load-path! "~/.emacs.d/org-krita")
;; (require 'org-krita)
;; (add-hook 'org-mode-hook 'org-krita-mode)
;; (setq org-krita-extract-filename "preview.png")
;; (setq org-krita-scale 1)

;; (add-load-path! "~/.emacs.d/org-xournalpp")
;; (require 'org-xournalpp)
;; (add-hook 'org-mode-hook 'org-xournalpp-mode)
;; (setq org-xournalpp-template-getter
;;   '(closure
;;     (t)
;;     nil
;;     (file-truename "~/Templates/template.xopp") ; use my own template
;;   )
;; )

;; override width to static 250 for now
;; so I don't have massive images in org mode (scrolling not fun)
;; (defun org-xournalpp--create-image (link refresh)
;;   "Extract svg/png from given LINK and return image.

;; Regenerate the cached inline image, if REFRESH is true.

;; If the path from LINK does not exist, nil is returned."
;;   (let ((width 250)
;;         (xopp-path (f-expand (org-element-property :path link))))
;;     (when (f-exists? xopp-path)
;;         (if width
;;             (create-image (org-xournalpp--get-image xopp-path refresh)
;;                           org-xournalpp-image-type
;;                           nil
;;                           :width width)
;;           (create-image (org-xournalpp--get-image xopp-path refresh)
;;                         org-xournalpp-image-type
;;                         nil)))))

;; Online images inside of org mode is pretty cool
;; This snippit is from Tobias on Stack Exchange
;; https://emacs.stackexchange.com/questions/42281/org-mode-is-it-possible-to-display-online-images
;; (require 'org-yt)

;; (defun org-image-link (protocol link _description)
;;   "Interpret LINK as base64-encoded image data."
;;   (cl-assert (string-match "\\`img" protocol) nil
;;              "Expected protocol type starting with img")
;;   (let ((buf (url-retrieve-synchronously (concat (substring protocol 3) ":" link))))
;;     (cl-assert buf nil
;;                "Download of image \"%s\" failed." link)
;;     (with-current-buffer buf
;;       (goto-char (point-min))
;;       (re-search-forward "\r?\n\r?\n")
;;       (buffer-substring-no-properties (point) (point-max)))))

;; (org-link-set-parameters
;;  "imghttp"
;;  :image-data-fun #'org-image-link)

;; (org-link-set-parameters
;;  "imghttps"
;;  :image-data-fun #'org-image-link)

;; Mermaid diagrams
;; (setq ob-mermaid-cli-path "~/.nix-profile/bin/mmdc")

;;;-- projectile wrapper commands ;;;--
;; (require 'sudo-edit)
;; (setq sudo-edit-local-method "doas")

;; (map! :leader
;;       :desc "Open current file as root"
;;       "f U" #'sudo-edit-current-file)
;; (map! :leader
;;       :desc "Find a file and open as root"
;;       "f u" #'sudo-edit-find-file)

(require 'focus)

(map! :leader
      :prefix ("F" . "Focus mode")
      :desc "Toggle focus mode"
      "t" 'focus-mode

      :desc "Pin focused section"
      "p" 'focus-pin

      :desc "Unpin focused section"
      "u" 'focus-unpin)

;; (add-to-list 'focus-mode-to-thing '(org-mode . org-element))
;; (add-to-list 'focus-mode-to-thing '(python-mode . paragraph))
;; (add-to-list 'focus-mode-to-thing '(lisp-mode . paragraph))

;;(add-hook 'org-mode-hook #'focus-mode)

(lsp-treemacs-sync-mode 1)

(setq lsp-treemacs-deps-position-params
      '((side . right)
        (slot . 1)
        (window-width . 35)))

(setq lsp-treemacs-symbols-position-params
      '((side . right)
        (slot . 2)
        (window-width . 35)))

(map! :leader :desc "Open treemacs symbol outliner" "o s" #'lsp-treemacs-symbols
      :desc "Hide neotree" "o S" #'treemacs-quit)

;; (setq +format-on-save-enabled-modes '(not emacs-lisp-mode sql-mode tex-mode latex-mode org-msg-edit-mode nix-mode))

;; Enable autorevert globally so that buffers update when files change on disk.
;; Very useful when used with file syncing (i.e. syncthing)
(setq global-auto-revert-mode nil)
(setq auto-revert-use-notify t)

;; (use-package lsp-nix
;;   :ensure lsp-mode
;;   :after (lsp-mode)
;;   :demand t
;;   :custom
;;   (lsp-nix-nil-formatter ["nixpkgs-fmt"]))

(use-package! theme-magic
  :commands theme-magic-from-emacs
  :config
  (defadvice! theme-magic--auto-extract-16-doom-colors ()
    :override #'theme-magic--auto-extract-16-colors
    (list
     (face-attribute 'default :background)
     (doom-color 'error)
     (doom-color 'success)
     (doom-color 'type)
     (doom-color 'keywords)
     (doom-color 'constants)
     (doom-color 'functions)
     (face-attribute 'default :foreground)
     (face-attribute 'shadow :foreground)
     (doom-blend 'base8 'error 0.1)
     (doom-blend 'base8 'success 0.1)
     (doom-blend 'base8 'type 0.1)
     (doom-blend 'base8 'keywords 0.1)
     (doom-blend 'base8 'constants 0.1)
     (doom-blend 'base8 'functions 0.1)
     (face-attribute 'default :foreground))))

#+end_src
